winnerodds(600,"Angie Craig","Jason Lewis",.46,.41)
36+33+26
winnerodds(579,"Erik Paulsen","Terri Bonoff",.49,.38)
library(RCurl)
library(tidyr)
library(maptools)
library(RColorBrewer)
library(sp)
library(shapefiles)
library(dplyr)
library(plotrix)
setwd("~/Dropbox/Sharing Folder/Code/20161108sosgrabber")
senate <- read.table(
textConnection(
getURL("ftp://ftp.sos.state.mn.us/20161108/stsenate.txt",userpwd = "media:results")),
sep=";")
senate <- senate[,c(4:8,11:16)]
colnames(senate) <- c("OfficeID","OfficeName","District","CandidateID","CandidateName","Party","PctsReporting","PctsTotal","Votes","VotesPct","VotesTotal")
senatewide <- senate %>% select(District, Party, PctsReporting, PctsTotal, Votes, VotesTotal) %>% group_by(District) %>% spread(Party, Votes)
senatenames <- senate %>% subset(Party != "WI") %>% select(District, Party, CandidateName) %>% group_by(District) %>% spread(Party, CandidateName) %>% rename(DFL.candidate = DFL, IP.candidate = IP, LIB.candidate = LIB, LMN.candidate = LMN, R.candidate = R)
senatewide <- left_join(senatewide, senatenames, by = "District")
senmap <- readShapePoly("~/Dropbox/Sharing Folder/Maps/S2012/S2012.shp")
senmap@data <- arrange(senmap@data, DISTRICT) %>% left_join(senatewide, by = c("DATA" = "District"))
sen2012 <-
read.table(
textConnection(
getURL("http://electionresults.sos.state.mn.us/Results/MediaResult/1?mediafileid=30")),
sep=";")
sen2012 <- sen2012[,c(4:8,11:16)]
colnames(sen2012) <- c("OfficeID","OfficeName","District","CandidateID","CandidateName","Party","PctsReporting","PctsTotal","Votes","VotesPct","VotesTotal")
sen2012w <- sen2012 %>% select(District, Party,Votes,VotesTotal) %>% group_by(District) %>% spread(Party, Votes)
sen2012w$Dpct <- sen2012w$DFL/sen2012w$VotesTotal
sen2012w$Rpct <- sen2012w$R/sen2012w$VotesTotal
sen2012w$marg <- sen2012w$Dpct-sen2012w$Rpct
sen2012w$marg[!complete.cases(sen2012w$marg)] <- 1
senmap@data$marg <- sen2012w$marg
senmap@data$PctsReporting <- round(runif(1, min = .8)*senmap@data$PctsTotal,0)
senmap@data$call <- ifelse((1-(senmap@data$PctsReporting/senmap@data$PctsTotal))/abs(senmap@data$DFL/senmap@data$VotesTotal-senmap@data$R/senmap@data$VotesTotal) <= 1, "C",NA)
for(i in 1:67) {
if(is.na(senmap@data$call[i])) {
senmap@data$color[i] <- "grey"
} else if (senmap@data$marg[i] > 0) {
senmap@data$color[i] <- "blue"
} else if (senmap@data$marg[i] < 0) {
senmap@data$color[i] <- "red"
} else {
senmap@data$color[i] <- "grey"
}
}
png("senmap.png", width=1000, height=1000)
par(mar = c(.5,.5,5,.5)) ## Set the margins
plot(
senmap,
col=senmap@data$color,
border = "white",
lwd=.4
)
dev.off()
?mtext
View(senmap@data)
library(plotly)
base_plot <- plot_ly(
type = "pie",
values = c(40, 10, 10, 10, 10, 10, 10),
labels = c("-", "0", "20", "40", "60", "80", "100"),
rotation = 108,
direction = "clockwise",
hole = 0.4,
textinfo = "label",
textposition = "outside",
hoverinfo = "none",
domain = list(x = c(0, 0.48), y = c(0, 1)),
marker = list(colors = c('rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)')),
showlegend = FALSE
)
install.packages("plotly)")
setwd("/Users/david 1/Dropbox/Sharing Folder/Code/debate")
source("debatecloud.r")
debatecloud("clinton","trump","wallace")
debatecloud(c("clinton","trump","wallace"))
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
file <- "debate3.txt"
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
View(quotes)
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
length(subset(quotes, V1 == WALLACE, select = V2))
length(subset(quotes, V1 == "WALLACE", select = V2))
a <- subset(quotes, V1 == "WALLACE", select = V2)
View(a)
library(stringr)
?str_count
str_count(a)
str_count(quotes[V1 == "CLINTON",2])
str_count(subset(quotes, V1== "CLINTON", select = V2))
str_count(subset(quotes, V1== "TRUMP", select = V2))
library(dplyr)
a <- spread(quotes, V1, V2)
?spread
names <- c("clinton","trump","wallace")
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])}
write(clinton, "clinton.txt")
write(trump,"trump.txt")
write(wallace,"wallace.txt")
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
source("debatecloud.r")
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
file = "debate3.txt"
names <- c("clinton","trump","wallace")
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
head(clinton)
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace)) ## Strip out unnecessary whitespace.
assign(paste0(names[i],".tdm"), TermDocumentMatrix(get(names[i])))
}
clinton.tdm
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
inspect(wallace)
a <- lapply(wallace, as.character)
head(a)
a <- sapply(trump, as.character)
head(a)
str_count(a)
sum(str_count(a))
b <- sapply(clinton, as.character)
sum(str_count(b))
str_count(b)
setwd("/Users/david 1/Dropbox/Sharing Folder/Maps/Absentee ballots 2016")
source("absenteemap.r")
absenteemap("102016 ballots.xls")
sosdate <- "102016"
sosdate[1:2]
sosdate[[1:2]]
substring(sosdate,1,2)
absenteemap("102016 ballots.xls")
paste0(
"as of ",
substring(sosdate,1,2),
"/",
substring(sosdate,3,4),"/",
substring(sosdate,5,6))
source("absenteemap.r)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
absenteemap("101316 ballots.xls")
file = "102016 ballots.xls"
library(dplyr)
library(maptools)
library(xlsx)
library(Hmisc)
library(RColorBrewer)
library(ggplot2)
library(scales)
sosdate <- substr(file, 1, 6)
ballots <- read.xlsx(file, sheetIndex = 1, stringsAsFactors = F) %>% arrange(Accepted)
ballots <- ballots[-88,]
ballots$County <- gsub(" County Totals:","",ballots$County)
ballots$County <- gsub("St. ","Saint ",ballots$County)
ballots$County <- gsub("Mcleod","McLeod",ballots$County)
ballots$County <- gsub("Of The","of the",ballots$County)
ballots$num <- as.numeric(row.names(ballots))
counties <- readShapePoly("~/Dropbox/Sharing Folder/Maps/mn counties/county.shp")
counties@data <- suppressWarnings(
left_join(
counties@data,
ballots,
by = c("COUNTYNAME" = "County")
)
)
counties@data$Log <- log10(counties@data$Accepted)
colors <- brewer.pal(6,"Greens")
counties@data <- counties@data %>% mutate(color = colors[trunc(counties@data[,13])+1])
counts <- count(counties@data, trunc(Log))
View(counts)
View(counties@data)
?count
?rbind
rbind(counts,c(0,0))
ifelse(counts[1,1] != 0, counts <- rbind(counts,c(0,0))
)
View(counts)
counts <- count(counties@data, trunc(Log))
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),trunc(Log))
)
colnames(counts) <- c("category","n")
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category))
?ifelse
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category), NA)
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category), NA)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
View(ballots)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
setwd("/Users/david 1/GitHub/personal-work/mlb-attendance")
source("mlb-attendance.r")
source("mlb-attendance.r")
source("mlb-attendance.r")
library(rvest)
library(tidyverse)
library(ggrepel)
library(scales)
library(stringr)
library(grid)
library(lubridate)
source("http://peterhaschke.com/Code/multiplot.R") # Load a function to plot multiple ggplot charts
# Download attendance data
url <- "http://www.espn.com/mlb/attendance" # Set the URL of the page
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") # Label the columns
View(attendance)
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1)
?html_table
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2))
?mutate_at
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ","))
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric)
View(attendance)
# Download ballpark capacity
url <- "https://en.wikipedia.org/wiki/List_of_Major_League_Baseball_stadiums"
capacity <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[2]') %>%
html_table() %>%
`[[`(1)
capacity <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>%
html_table() %>%
`[[`(1)
View(capacity)
capacity <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>%
html_table() %>%
`[[`(1) %>%
mutate_at(vars(3, 6), ~str_remove_all(., "\\[[^\\]]*\\]"))
View(capacity)
capacity <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>%
html_table() %>%
`[[`(1) %>%
mutate_at(vars(3, 6), ~str_remove_all(., "\\[[^\\]]*\\]")) %>%
mutate_at(vars(3), ~str_remove_all(., ","))
capacity <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>%
html_table() %>%
`[[`(1) %>%
mutate_at(vars(3, 6), ~str_remove_all(., "\\[[^\\]]*\\]")) %>%
mutate_at(vars(3), ~str_remove_all(., ",") %>% as.numeric())
View(capacity)
# Sort the two tables to get them in the same order
capacity <- capacity %>% arrange(Team)
attendance <- attendance %>% arrange(Team)
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric) %>%
arrange(Team) %>%
bind_cols(capacity$Capacity)
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric) %>%
arrange(Team) %>%
bind_cols(capacity %>% select(Capacity))
# Download attendance data
url <- "http://www.espn.com/mlb/attendance" # Set the URL of the page
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric) %>%
arrange(Team) %>%
bind_cols(capacity %>% select(Capacity))
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric) %>%
arrange(Team) %>%
bind_cols(capacity %>% select(Capacity)) %>%
mutate(HomePct = HomeAverage / Capacity)
attendance <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="my-teams-table"]/div/div/table') %>% # Select the table
html_table() %>%
`[[`(1) %>%
set_names("Rank2016","Team","HomeGames","HomeTotal","HomeAverage","HomePct","RoadGames","RoadAverage","RoadPct","OverallGames","OverallAverage","OverallPct") %>% # Label the columns
slice(-c(1:2)) %>%
mutate_at(vars(4, 5, 8, 11), ~str_remove_all(., ",")) %>%
mutate_at(vars(1, 3:12), as.numeric) %>%
arrange(Team) %>%
bind_cols(capacity %>% select(Capacity)) %>%
mutate(HomePct = HomeAverage / Capacity,
Abbrev = c("ARI","ATL","BAL","BOS","CHC","CHW","CIN","CLE","COL","DET","HOU","KCR","LAA","LAD","MIA","MIL","MIN","NYM","NYY","OAK","PHI","PIT","SDP","SFG","SEA","STL","TBR","TEX","TOR","WSN"))
aes(label=Abbrev),
size = 3) + # Set the font size
scale_x_continuous(labels=comma, # Insert commas into the x-axis labels
breaks=c(15000,25000,35000,45000,55000)) + # Set the breaks
scale_y_continuous(labels=percent) + # Convert the y-axis into percentages.
labs(title = paste0( # Title the plot dynamically
year(Sys.Date()), # The current year
" MLB home attendance vs. capacity (through ",
strftime(Sys.Date()-1, format = "%m/%d"), # Yesterday
")"),
x = "Attendance",
y = "Attendance as percent of capacity")
ggplot(attendance, aes(HomeAverage,HomePct)) + # Make the first graph, attendance vs. percent attendance
geom_point(size=1) + # Tiny points
geom_text_repel( # This plots the labels, but around the points.
aes(label=Abbrev),
size = 3) + # Set the font size
scale_x_continuous(labels=comma, # Insert commas into the x-axis labels
breaks=c(15000,25000,35000,45000,55000)) + # Set the breaks
scale_y_continuous(labels=percent) + # Convert the y-axis into percentages.
labs(title = paste0( # Title the plot dynamically
year(Sys.Date()), # The current year
" MLB home attendance vs. capacity (through ",
strftime(Sys.Date()-1, format = "%m/%d"), # Yesterday
")"),
x = "Attendance",
y = "Attendance as percent of capacity")
aes(label=Abbrev),
size = 3) + # Set the font size
scale_x_continuous(labels=comma, # Insert commas into the x-axis labels
breaks=c(15000,25000,35000,45000,55000)) + # Set the breaks
scale_y_continuous(labels=percent_format(accuracy = 1)) + # Convert the y-axis into percentages.
labs(title = paste0( # Title the plot dynamically
year(Sys.Date()), # The current year
" MLB home attendance vs. capacity (through ",
strftime(Sys.Date()-1, format = "%m/%d"), # Yesterday
")"),
x = "Attendance",
y = "Attendance as percent of capacity")
a <- ggplot(attendance, aes(HomeAverage,HomePct)) + # Make the first graph, attendance vs. percent attendance
geom_point(size=1) + # Tiny points
geom_text_repel( # This plots the labels, but around the points.
aes(label=Abbrev),
size = 3) + # Set the font size
scale_x_continuous(labels=comma, # Insert commas into the x-axis labels
breaks=c(15000,25000,35000,45000,55000)) + # Set the breaks
scale_y_continuous(labels=percent_format(accuracy = 1)) + # Convert the y-axis into percentages.
labs(title = paste0( # Title the plot dynamically
year(Sys.Date()), # The current year
" MLB home attendance vs. capacity (through ",
strftime(Sys.Date()-1, format = "%m/%d"), # Yesterday
")"),
x = "Attendance",
y = "Attendance as percent of capacity")
a
b <- ggplot(attendance, aes(HomeAverage,Capacity)) + # Make the second graph, attendance vs. capacity
geom_point(size=1) + # Tiny points
geom_text_repel(aes(label=Abbrev), size = 3) + #Set the font size
scale_x_continuous(labels=comma, breaks=c(15000,25000,35000,45000,55000)) +
scale_y_continuous(labels=comma, limits=c(30000,60000)) +
labs(caption = "By David Montgomery, github.com/dhmontgomery",
x = "Average home attendance",
y = "Ballpark capacity")
# Save as a square PNG
try( # Suppress an apparently harmless error message
ggsave("attendance.png",plot=multiplot(a,b), device="png", height=10, width=10),
silent = T)
b <- ggplot(attendance, aes(HomeAverage,Capacity)) + # Make the second graph, attendance vs. capacity
geom_point(size=1) + # Tiny points
geom_text_repel(aes(label=Abbrev), size = 3) + #Set the font size
scale_x_continuous(labels=comma, breaks=c(15000,25000,35000,45000,55000)) +
scale_y_continuous(labels=comma, limits=c(20000,60000)) +
labs(caption = "By David Montgomery, github.com/dhmontgomery",
x = "Average home attendance",
y = "Ballpark capacity")
# Save as a square PNG
try( # Suppress an apparently harmless error message
ggsave("attendance.png",plot=multiplot(a,b), device="png", height=10, width=10),
silent = T)
a <- ggplot(attendance, aes(HomeAverage,HomePct)) + # Make the first graph, attendance vs. percent attendance
geom_point(size=1) + # Tiny points
geom_text_repel( # This plots the labels, but around the points.
aes(label=Abbrev),
size = 3) + # Set the font size
scale_x_continuous(labels=comma, # Insert commas into the x-axis labels
breaks=c(15000,25000,35000,45000,55000)) + # Set the breaks
scale_y_continuous(labels=percent_format(accuracy = 1)) + # Convert the y-axis into percentages.
labs(title = paste0( # Title the plot dynamically
year(Sys.Date()), # The current year
" MLB home attendance vs. capacity (through ",
strftime(Sys.Date()-1, format = "%m/%d"), # Yesterday
")"),
y = "Attendance as percent of capacity") +
theme(axis.title.x = element_blank())
# Save as a square PNG
try( # Suppress an apparently harmless error message
ggsave("attendance.png",plot=multiplot(a,b), device="png", height=10, width=10),
silent = T)
# Save as a square PNG
ggsave("attendance.png",plot=multiplot(a,b), device="png", height=10, width=10)
?comma
b <- ggplot(attendance, aes(HomeAverage,Capacity)) + # Make the second graph, attendance vs. capacity
geom_point(size=1) + # Tiny points
geom_text_repel(aes(label=Abbrev), size = 3) + #Set the font size
scale_x_continuous(labels=comma, breaks=c(15000,25000,35000,45000,55000)) +
scale_y_continuous(labels=comma_format(scale = 0.001, suffix = "K"), limits=c(20000,60000)) +
labs(caption = "By David Montgomery, github.com/dhmontgomery",
x = "Average home attendance",
y = "Ballpark capacity")
# Save as a square PNG
ggsave("attendance.png",plot=multiplot(a,b), device="png", height=10, width=10)
attendance %>% select(2, 6)
